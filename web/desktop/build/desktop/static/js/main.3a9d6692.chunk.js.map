{"version":3,"sources":["router/history.ts","pages/Loading.tsx","pages/Error.tsx","router/index.tsx","App.tsx","serviceWorker.ts","store/history.ts","index.tsx","store/index.ts"],"names":["createBrowserHistory","Admin","className","tip","React","Component","Error","inject","path","this","props","store","history","go","push","status","errorCode","title","subTitle","errorMsg","extra","key","type","onClick","backToHome","bind","msg","Login","lazy","Feedback","HistoryContext","createContext","App","Provider","value","fallback","Loading","to","Boolean","window","location","hostname","match","observable","ReactDOM","render","locale","zhCN","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4TACeA,gB,SCaAC,E,uKARX,OACE,yBAAKC,UAAU,gBACb,kBAAC,IAAD,CAAMC,IAAI,mE,GAJEC,IAAMC,W,kBCiFXC,EAzEdC,YAAO,Q,4KAiBKC,GACa,IAAD,EAEd,EAFM,SAATA,EACF,UAAAC,KAAKC,MAAMC,aAAX,SAAkBC,QAAQC,IAAI,GAE9B,UAAAJ,KAAKC,MAAMC,aAAX,SAAkBC,QAAQE,KAAKN,K,+BAIjC,OACE,kBAAC,IAAD,CACEO,OAAQN,KAAKC,MAAMM,UACnBC,MAAOR,KAAKC,MAAMM,UAClBE,SAAUT,KAAKU,SACfC,MAAO,CACL,CAC2B,MAAzBX,KAAKC,MAAMM,UACT,kBAAC,IAAD,CACEK,IAAI,MACJC,KAAK,UACLC,QAASd,KAAKe,WAAWC,KAAKhB,KAAM,WAHtC,gBAOE,KACqB,MAAzBA,KAAKC,MAAMM,UACT,kBAAC,IAAD,CACEK,IAAI,MACJC,KAAK,UACLC,QAASd,KAAKe,WAAWC,KAAKhB,KAAM,SAHtC,kCAOE,KACqB,MAAzBA,KAAKC,MAAMM,UACT,kBAAC,IAAD,CACEK,IAAI,MACJC,KAAK,UACLC,QAASd,KAAKe,WAAWC,KAAKhB,KAAM,cAHtC,kCAOE,KACJ,kBAAC,IAAD,CACEY,IAAI,QACJC,KAAK,UACLC,QAASd,KAAKe,WAAWC,KAAKhB,KAAM,MAHtC,kC,+BAxDR,IAAIiB,EAAM,2BACV,OAAQjB,KAAKC,MAAMM,WACjB,KAAK,IACHU,GAAY,mDACZ,MACF,KAAK,IACHA,GAAY,yDACZ,MACF,KAAK,IACHA,GAAY,6CAGhB,OAAOA,M,GAdStB,IAAMC,a,ECLpBsB,EAAQC,gBAAK,kBAAM,iCACnB3B,EAAQ2B,gBAAK,kBAAM,iCACnBC,EAAWD,gBAAK,kBAAM,iCAEtBE,EAAiB1B,IAAM2B,cAAc,CAAEnB,YAC9B,SAASoB,IACtB,OACE,kBAAC,IAAD,CAAQpB,QAASA,GACf,kBAACkB,EAAeG,SAAhB,CAAyBC,MAAO,CAAEtB,YAChC,kBAAC,WAAD,CAAUuB,SAAU,kBAACC,EAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO5B,KAAK,UACV,kBAACmB,EAAD,OAEF,kBAAC,IAAD,CAAOnB,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAACqB,EAAD,OAEF,kBAAC,IAAD,CAAOrB,KAAK,QACV,kBAAC,EAAD,CAAOQ,UAAW,OAEpB,kBAAC,IAAD,CAAOR,KAAK,QACV,kBAAC,EAAD,CAAOQ,UAAW,OAEpB,kBAAC,IAAD,CAAOR,KAAK,QACV,kBAAC,EAAD,CAAOQ,UAAW,OAEpB,kBAAC,IAAD,CAAOR,KAAK,KACV,kBAAC,IAAD,CAAU6B,GAAG,c,WC3BZL,E,uKAJX,OAAO,kBAAC,EAAD,U,GAFO5B,IAAMC,WCOJiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0DChBS9B,ICUTD,EAAQ,CACZA,MAAO,I,4GCPNgC,K,yEAA4B/B,K,IDU/BgC,IAASC,OACP,kBAAC,IAAalC,EACZ,kBAAC,IAAD,CAAgBmC,OAAQC,KACtB,kBAAC,EAAD,QAGJC,SAASC,eAAe,SFqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3a9d6692.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();\n","import React from \"react\";\nimport { Spin } from \"antd\";\ninterface iProps {}\ninterface iState {}\nclass Admin extends React.Component<iProps, iState> {\n  render() {\n    return (\n      <div className=\"loading-page\">\n        <Spin tip=\"页面跳转中，请稍后...\" />\n      </div>\n    );\n  }\n}\n\nexport default Admin;\n","import React from \"react\";\nimport { Result, Button } from \"antd\";\nimport { inject, observer } from \"mobx-react\";\nimport Store from \"@/store\";\n\ninterface iProps {\n  errorCode: 403 | 404 | 500;\n  store?: Store;\n}\n\ninterface iState {}\n\n@inject(\"store\")\nclass Error extends React.Component<iProps, iState> {\n  get errorMsg() {\n    let msg = \"对不起，\";\n    switch (this.props.errorCode) {\n      case 403:\n        msg = msg + \"您暂无访问权限。\";\n        break;\n      case 404:\n        msg = msg + \"访问的页面不存在。\";\n        break;\n      case 500:\n        msg = msg + \"服务器出错了。\";\n        break;\n    }\n    return msg;\n  }\n  backToHome(path: string) {\n    if (path === \"back\") {\n      this.props.store?.history.go(-1);\n    } else {\n      this.props.store?.history.push(path);\n    }\n  }\n  render() {\n    return (\n      <Result\n        status={this.props.errorCode}\n        title={this.props.errorCode}\n        subTitle={this.errorMsg}\n        extra={[\n          [\n            this.props.errorCode === 403 ? (\n              <Button\n                key=\"403\"\n                type=\"primary\"\n                onClick={this.backToHome.bind(this, \"/login\")}\n              >\n                登录\n              </Button>\n            ) : null,\n            this.props.errorCode === 404 ? (\n              <Button\n                key=\"404\"\n                type=\"primary\"\n                onClick={this.backToHome.bind(this, \"back\")}\n              >\n                返回上一级\n              </Button>\n            ) : null,\n            this.props.errorCode === 500 ? (\n              <Button\n                key=\"500\"\n                type=\"primary\"\n                onClick={this.backToHome.bind(this, \"/feedback\")}\n              >\n                联系管理员\n              </Button>\n            ) : null,\n            <Button\n              key=\"index\"\n              type=\"primary\"\n              onClick={this.backToHome.bind(this, \"/\")}\n            >\n              回到首页\n            </Button>,\n          ],\n        ]}\n      />\n    );\n  }\n}\n\nexport default Error;\n","import React, { lazy, Suspense } from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport { Router } from \"react-router\";\nimport history from \"@/router/history\";\n\nimport Loading from \"@/pages/Loading\";\nimport Error from \"@/pages/Error\";\n\nconst Login = lazy(() => import(\"@/pages/Login\"));\nconst Admin = lazy(() => import(\"@/pages/Admin\"));\nconst Feedback = lazy(() => import(\"@/pages/Feedback\"));\n\nconst HistoryContext = React.createContext({ history });\nexport default function App() {\n  return (\n    <Router history={history}>\n      <HistoryContext.Provider value={{ history }}>\n        <Suspense fallback={<Loading />}>\n          <Switch>\n            <Route path=\"/login\">\n              <Login />\n            </Route>\n            <Route path=\"/admin\">\n              <Admin />\n            </Route>\n            <Route path=\"/feedback\">\n              <Feedback />\n            </Route>\n            <Route path=\"/403\">\n              <Error errorCode={403} />\n            </Route>\n            <Route path=\"/404\">\n              <Error errorCode={404} />\n            </Route>\n            <Route path=\"/500\">\n              <Error errorCode={500} />\n            </Route>\n            <Route path=\"*\">\n              <Redirect to=\"/404\" />\n            </Route>\n          </Switch>\n        </Suspense>\n      </HistoryContext.Provider>\n    </Router>\n  );\n}\n","import React from \"react\";\nimport Router from \"@/router\";\nimport \"./App.less\";\ninterface iProps {}\ninterface iState {}\nclass App extends React.Component<iProps, iState> {\n  render() {\n    return <Router />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import history from \"@/router/history\";\n\nexport default history;\n","import { Provider } from \"mobx-react\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ConfigProvider } from \"antd\";\nimport \"./index.less\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport zhCN from \"antd/es/locale/zh_CN\";\nimport \"dayjs/locale/zh-cn\";\n\nimport Store from \"@/store\";\n\nconst store = {\n  store: new Store(),\n};\n\nReactDOM.render(\n  <Provider {...store}>\n    <ConfigProvider locale={zhCN}>\n      <App />\n    </ConfigProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { action, computed, observable } from \"mobx\";\nimport history from \"@/store/history\";\n\nclass Store {\n  // 被观察者，你可以理解成Vuex中的State，也就是说，声明一些想要观察的状态，变量。\n  // 被观察者可以是：JS基本数据类型、引用类型、普通对象、类实例、数组和映射\n  @observable public history = history;\n}\nexport default Store;\n"],"sourceRoot":""}